// ====== Class declarations ====== //
class POLYNOMIAL {
	public evaluate(float x) : float;
};

class LINEAR inherits POLYNOMIAL {
	private float a;
	private float b;
	
	public build(float A, float B) : LINEAR;
	public evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL, QUADRATIC {
	private float a;
	private float b;
	private float c;
	
	public build(float A, float B, float C) : QUADRATIC;
	public evaluate(float x) : float;
};

// ====== Function Definitions ====== //
POLYNOMIAL::evaluate(float x) : float
  do
    return (0);
  end;

LINEAR::evaluate(float x) : float
  local
    float result;
    float s;
  do
    result = 0.0;
    result = a * x + b;
    return (result);
  end;
  
QUADRATIC::evaluate(float x) : float
  local
    float result;
  do    //Using Horner's method
    result = a;
    result = result * x + b;
    result = result * x + c;
    return (result);
  end;
  
LINEAR::build(float A, float B) : LINEAR
  local
    LINEAR new_function;
  do
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  end;

build(float A, float B) : QUADRATIC
  do
    new_function.a = A;
    new_function.b = B;
    return (new_function);
  end;
  
QUADRATIC::build(float A, float B, float C) : QUADRATIC
  local
    QUADRATIC new_function;
  do
    new_function.a = A;
    new_function.b = B;
    new_function.c = C;
    return (new_function);
  end;
  

// ====== main ====== //
main
  local
    linear f1;
    quadratic f2;
    integer counter;
  do
    f1 = f1.build(dk > 6, 3.5);
    f2 = f2.build(-2.0, 1.0, 0.0);
    dfd();
    f2.f2.fde();
    alskd.f.df.d.f[3] = 4;
    eiei.f.df.d.f = 4;
    counter = 1;
    if (counter.s.df <= 10)
    then 
    else;

    if (counter.sd.f() <= 10)
    then 
    f = 5;
    else
    d = 9;;
	
    while(counter <= 10)
      do
        write(counter);
        write(f1.evaluate(counter));
        write(f2.evaluate(counter));
        read(r);
      end;
  end;